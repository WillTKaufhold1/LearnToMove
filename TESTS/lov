HOOMD-blue 2.9.0 DOUBLE HPMC_MIXED TBB SSE SSE2 SSE3 
Compiled: 02/04/2020
Copyright (c) 2009-2019 The Regents of the University of Michigan.
-----
You are using HOOMD-blue. Please cite the following:
* J A Anderson, C D Lorenz, and A Travesset. "General purpose molecular dynamics
  simulations fully implemented on graphics processing units", Journal of
  Computational Physics 227 (2008) 5342--5359
* J Glaser, T D Nguyen, J A Anderson, P Lui, F Spiga, J A Millan, D C Morse, and
  S C Glotzer. "Strong scaling of general-purpose molecular dynamics simulations
  on GPUs", Computer Physics Communications 192 (2015) 97--107
-----
HOOMD-blue is running on the CPU
HOOMD-blue 2.9.0 DOUBLE HPMC_MIXED TBB SSE SSE2 SSE3 
Compiled: 02/04/2020
Copyright (c) 2009-2019 The Regents of the University of Michigan.
HOOMD-blue 2.9.0 DOUBLE HPMC_MIXED TBB SSE SSE2 SSE3 
Compiled: 02/04/2020
Copyright (c) 2009-2019 The Regents of the University of Michigan.
-----
You are using HOOMD-blue. Please cite the following:
* J A Anderson, C D Lorenz, and A Travesset. "General purpose molecular dynamics
  simulations fully implemented on graphics processing units", Journal of
  Computational Physics 227 (2008) 5342--5359
* J Glaser, T D Nguyen, J A Anderson, P Lui, F Spiga, J A Millan, D C Morse, and
  S C Glotzer. "Strong scaling of general-purpose molecular dynamics simulations
  on GPUs", Computer Physics Communications 192 (2015) 97--107
-----
HOOMD-blue is running on the CPU
-----
You are using HOOMD-blue. Please cite the following:
* J A Anderson, C D Lorenz, and A Travesset. "General purpose molecular dynamics
  simulations fully implemented on graphics processing units", Journal of
  Computational Physics 227 (2008) 5342--5359
* J Glaser, T D Nguyen, J A Anderson, P Lui, F Spiga, J A Millan, D C Morse, and
  S C Glotzer. "Strong scaling of general-purpose molecular dynamics simulations
  on GPUs", Computer Physics Communications 192 (2015) 97--107
-----
HOOMD-blue is running on the CPU
['dna0', 'dna1', 'dna2', 'dna3', 'dna4']
run.py:043  |      hoomd.init.read_snapshot(snapshot)
['dna0', 'dna1', 'dna2', 'dna3', 'dna4']
run.py:043  |      hoomd.init.read_snapshot(snapshot)
notice(2): Group "all" created containing 4 particles
['dna0', 'dna1', 'dna2', 'dna3', 'dna4']
run.py:043  |      hoomd.init.read_snapshot(snapshot)
notice(2): Group "all" created containing 4 particles
notice(2): Group "all" created containing 4 particles
run.py:045  |      nl = hoomd.md.nlist.tree()
run.py:045  |      nl = hoomd.md.nlist.tree()
-----
You are using tree neighbor lists. Please cite the following:
* M P Howard, J A Anderson, A Nikoubashman, S C Glotzer, and A Z
  Panagiotopoulos. "Efficient neighbor list calculation for molecular simulation
  of colloidal systems using graphics processing units", Computer Physics
  Communications 203 (2016) 45--52
* M P Howard, A Statt, F Madutsa, T M Truskett, and A Z Panagiotopoulos.
  "Quantized bounding volume hierarchies for neighbor search in molecular
  simulations on graphics processing units", Computational Materials Science 164
  (2019) 139--146
-----
-----
You are using tree neighbor lists. Please cite the following:
* M P Howard, J A Anderson, A Nikoubashman, S C Glotzer, and A Z
  Panagiotopoulos. "Efficient neighbor list calculation for molecular simulation
  of colloidal systems using graphics processing units", Computer Physics
  Communications 203 (2016) 45--52
* M P Howard, A Statt, F Madutsa, T M Truskett, and A Z Panagiotopoulos.
  "Quantized bounding volume hierarchies for neighbor search in molecular
  simulations on graphics processing units", Computational Materials Science 164
  (2019) 139--146
-----
run.py:047  |      lj = hoomd.md.pair.lj(r_cut=2.5, nlist=nl)
run.py:045  |      nl = hoomd.md.nlist.tree()
run.py:047  |      lj = hoomd.md.pair.lj(r_cut=2.5, nlist=nl)
-----
You are using tree neighbor lists. Please cite the following:
* M P Howard, J A Anderson, A Nikoubashman, S C Glotzer, and A Z
  Panagiotopoulos. "Efficient neighbor list calculation for molecular simulation
  of colloidal systems using graphics processing units", Computer Physics
  Communications 203 (2016) 45--52
* M P Howard, A Statt, F Madutsa, T M Truskett, and A Z Panagiotopoulos.
  "Quantized bounding volume hierarchies for neighbor search in molecular
  simulations on graphics processing units", Computational Materials Science 164
  (2019) 139--146
-----
HOOMD-blue 2.9.0 DOUBLE HPMC_MIXED TBB SSE SSE2 SSE3 
Compiled: 02/04/2020
Copyright (c) 2009-2019 The Regents of the University of Michigan.
-----
You are using HOOMD-blue. Please cite the following:
* J A Anderson, C D Lorenz, and A Travesset. "General purpose molecular dynamics
  simulations fully implemented on graphics processing units", Journal of
  Computational Physics 227 (2008) 5342--5359
* J Glaser, T D Nguyen, J A Anderson, P Lui, F Spiga, J A Millan, D C Morse, and
  S C Glotzer. "Strong scaling of general-purpose molecular dynamics simulations
  on GPUs", Computer Physics Communications 192 (2015) 97--107
-----
HOOMD-blue is running on the CPU
run.py:048  |      lj.pair_coeff.set('A','A',epsilon = 10.000,sigma = 0.3)
['dna0', 'dna1', 'dna2', 'dna3', 'dna4']
run.py:043  |      hoomd.init.read_snapshot(snapshot)
notice(2): Group "all" created containing 4 particles
run.py:045  |      nl = hoomd.md.nlist.tree()
run.py:050  |      harmonic = hoomd.md.bond.harmonic()
-----
You are using tree neighbor lists. Please cite the following:
* M P Howard, J A Anderson, A Nikoubashman, S C Glotzer, and A Z
  Panagiotopoulos. "Efficient neighbor list calculation for molecular simulation
  of colloidal systems using graphics processing units", Computer Physics
  Communications 203 (2016) 45--52
* M P Howard, A Statt, F Madutsa, T M Truskett, and A Z Panagiotopoulos.
  "Quantized bounding volume hierarchies for neighbor search in molecular
  simulations on graphics processing units", Computational Materials Science 164
  (2019) 139--146
-----
run.py:047  |      lj = hoomd.md.pair.lj(r_cut=2.5, nlist=nl)
dna0
run.py:053  |          harmonic.bond_coeff.set(f'dna{index}', k=10.0, r0=i); 
run.py:048  |      lj.pair_coeff.set('A','A',epsilon = 10.000,sigma = 0.3)
run.py:048  |      lj.pair_coeff.set('A','A',epsilon = 10.000,sigma = 0.3)
run.py:050  |      harmonic = hoomd.md.bond.harmonic()
dna1
run.py:053  |          harmonic.bond_coeff.set(f'dna{index}', k=10.0, r0=i); 
dna0
run.py:053  |          harmonic.bond_coeff.set(f'dna{index}', k=10.0, r0=i); 
dna1
run.py:053  |          harmonic.bond_coeff.set(f'dna{index}', k=10.0, r0=i); 
dna2
run.py:053  |          harmonic.bond_coeff.set(f'dna{index}', k=10.0, r0=i); 
dna2
run.py:053  |          harmonic.bond_coeff.set(f'dna{index}', k=10.0, r0=i); 
dna3
run.py:053  |          harmonic.bond_coeff.set(f'dna{index}', k=10.0, r0=i); 
HOOMD-blue 2.9.0 DOUBLE HPMC_MIXED TBB SSE SSE2 SSE3 
Compiled: 02/04/2020
Copyright (c) 2009-2019 The Regents of the University of Michigan.
-----
You are using HOOMD-blue. Please cite the following:
* J A Anderson, C D Lorenz, and A Travesset. "General purpose molecular dynamics
  simulations fully implemented on graphics processing units", Journal of
  Computational Physics 227 (2008) 5342--5359
* J Glaser, T D Nguyen, J A Anderson, P Lui, F Spiga, J A Millan, D C Morse, and
  S C Glotzer. "Strong scaling of general-purpose molecular dynamics simulations
  on GPUs", Computer Physics Communications 192 (2015) 97--107
-----
run.py:050  |      harmonic = hoomd.md.bond.harmonic()
dna4
run.py:053  |          harmonic.bond_coeff.set(f'dna{index}', k=10.0, r0=i); 
run.py:047  |      lj = hoomd.md.pair.lj(r_cut=2.5, nlist=nl)
dna3
run.py:053  |          harmonic.bond_coeff.set(f'dna{index}', k=10.0, r0=i); 
HOOMD-blue is running on the CPU
dna0
run.py:053  |          harmonic.bond_coeff.set(f'dna{index}', k=10.0, r0=i); 
run.py:048  |      lj.pair_coeff.set('A','A',epsilon = 10.000,sigma = 0.3)
run.py:055  |      hoomd.md.integrate.mode_standard(dt=0.002)
dna4
run.py:053  |          harmonic.bond_coeff.set(f'dna{index}', k=10.0, r0=i); 
dna1
run.py:053  |          harmonic.bond_coeff.set(f'dna{index}', k=10.0, r0=i); 
run.py:050  |      harmonic = hoomd.md.bond.harmonic()
['dna0', 'dna1', 'dna2', 'dna3', 'dna4']
run.py:043  |      hoomd.init.read_snapshot(snapshot)
run.py:056  |      all = hoomd.group.all()
notice(2): Group "all" created containing 4 particles
dna2
run.py:053  |          harmonic.bond_coeff.set(f'dna{index}', k=10.0, r0=i); 
run.py:057  |      hoomd.md.integrate.langevin(group=all, kT=0.2, seed=42)
notice(2): integrate.langevin/bd is using specified gamma values
dna3
run.py:053  |          harmonic.bond_coeff.set(f'dna{index}', k=10.0, r0=i); 
run.py:045  |      nl = hoomd.md.nlist.tree()
run.py:055  |      hoomd.md.integrate.mode_standard(dt=0.002)
-----
You are using tree neighbor lists. Please cite the following:
* M P Howard, J A Anderson, A Nikoubashman, S C Glotzer, and A Z
  Panagiotopoulos. "Efficient neighbor list calculation for molecular simulation
  of colloidal systems using graphics processing units", Computer Physics
  Communications 203 (2016) 45--52
* M P Howard, A Statt, F Madutsa, T M Truskett, and A Z Panagiotopoulos.
  "Quantized bounding volume hierarchies for neighbor search in molecular
  simulations on graphics processing units", Computational Materials Science 164
  (2019) 139--146
-----
run.py:059  |      hoomd.md.update.zero_momentum(period = 4)
dna0
run.py:053  |          harmonic.bond_coeff.set(f'dna{index}', k=10.0, r0=i); 
dna4
run.py:053  |          harmonic.bond_coeff.set(f'dna{index}', k=10.0, r0=i); 
dna1
run.py:053  |          harmonic.bond_coeff.set(f'dna{index}', k=10.0, r0=i); 
run.py:061  |      hoomd.analyze.log(filename="log-output.log",
                  quantities=['potential_energy', 'temperature'],
                  period=2e5,
                  overwrite=True)
run.py:047  |      lj = hoomd.md.pair.lj(r_cut=2.5, nlist=nl)
run.py:055  |      hoomd.md.integrate.mode_standard(dt=0.002)
run.py:056  |      all = hoomd.group.all()
run.py:068  |      hoomd.dump.gsd(f"trajectory{RANDOM_SEED}.gsd", period=TRAJ_DUMP_PERIOD, group=all, overwrite=True)
dna2
run.py:053  |          harmonic.bond_coeff.set(f'dna{index}', k=10.0, r0=i); 
run.py:048  |      lj.pair_coeff.set('A','A',epsilon = 10.000,sigma = 0.3)
run.py:070  |      hoomd.run(N_steps)
notice(2): -- Neighborlist exclusion statistics -- :
notice(2): Particles with 2 exclusions             : 2
notice(2): Particles with 3 exclusions             : 2
notice(2): Neighbors included by diameter          : no
notice(2): Neighbors excluded when in the same body: no
run.py:056  |      all = hoomd.group.all()
** starting run **
dna3
run.py:053  |          harmonic.bond_coeff.set(f'dna{index}', k=10.0, r0=i); 
run.py:057  |      hoomd.md.integrate.langevin(group=all, kT=0.2, seed=42)
notice(2): integrate.langevin/bd is using specified gamma values
run.py:050  |      harmonic = hoomd.md.bond.harmonic()
run.py:057  |      hoomd.md.integrate.langevin(group=all, kT=0.2, seed=42)
notice(2): integrate.langevin/bd is using specified gamma values
dna0
run.py:053  |          harmonic.bond_coeff.set(f'dna{index}', k=10.0, r0=i); 
dna4
run.py:053  |          harmonic.bond_coeff.set(f'dna{index}', k=10.0, r0=i); 
dna1
run.py:053  |          harmonic.bond_coeff.set(f'dna{index}', k=10.0, r0=i); 
run.py:055  |      hoomd.md.integrate.mode_standard(dt=0.002)
dna2
run.py:053  |          harmonic.bond_coeff.set(f'dna{index}', k=10.0, r0=i); 
run.py:056  |      all = hoomd.group.all()
run.py:059  |      hoomd.md.update.zero_momentum(period = 4)
run.py:059  |      hoomd.md.update.zero_momentum(period = 4)
run.py:061  |      hoomd.analyze.log(filename="log-output.log",
                  quantities=['potential_energy', 'temperature'],
                  period=2e5,
                  overwrite=True)
run.py:061  |      hoomd.analyze.log(filename="log-output.log",
                  quantities=['potential_energy', 'temperature'],
                  period=2e5,
                  overwrite=True)
run.py:057  |      hoomd.md.integrate.langevin(group=all, kT=0.2, seed=42)
dna3
run.py:053  |          harmonic.bond_coeff.set(f'dna{index}', k=10.0, r0=i); 
notice(2): integrate.langevin/bd is using specified gamma values
run.py:068  |      hoomd.dump.gsd(f"trajectory{RANDOM_SEED}.gsd", period=TRAJ_DUMP_PERIOD, group=all, overwrite=True)
run.py:068  |      hoomd.dump.gsd(f"trajectory{RANDOM_SEED}.gsd", period=TRAJ_DUMP_PERIOD, group=all, overwrite=True)
run.py:059  |      hoomd.md.update.zero_momentum(period = 4)
run.py:070  |      hoomd.run(N_steps)
run.py:070  |      hoomd.run(N_steps)
run.py:061  |      hoomd.analyze.log(filename="log-output.log",
                  quantities=['potential_energy', 'temperature'],
                  period=2e5,
                  overwrite=True)
notice(2): -- Neighborlist exclusion statistics -- :
notice(2): Particles with 2 exclusions             : 2
notice(2): Particles with 3 exclusions             : 2
notice(2): Neighbors included by diameter          : no
notice(2): -- Neighborlist exclusion statistics -- :
notice(2): Particles with 2 exclusions             : 2
notice(2): Neighbors excluded when in the same body: no
notice(2): Particles with 3 exclusions             : 2
notice(2): Neighbors included by diameter          : no
** starting run **
notice(2): Neighbors excluded when in the same body: no
** starting run **
dna4
run.py:053  |          harmonic.bond_coeff.set(f'dna{index}', k=10.0, r0=i); 
run.py:055  |      hoomd.md.integrate.mode_standard(dt=0.002)
run.py:056  |      all = hoomd.group.all()
run.py:057  |      hoomd.md.integrate.langevin(group=all, kT=0.2, seed=42)
notice(2): integrate.langevin/bd is using specified gamma values
run.py:059  |      hoomd.md.update.zero_momentum(period = 4)
run.py:061  |      hoomd.analyze.log(filename="log-output.log",
                  quantities=['potential_energy', 'temperature'],
                  period=2e5,
                  overwrite=True)
run.py:068  |      hoomd.dump.gsd(f"trajectory{RANDOM_SEED}.gsd", period=TRAJ_DUMP_PERIOD, group=all, overwrite=True)
run.py:070  |      hoomd.run(N_steps)
notice(2): -- Neighborlist exclusion statistics -- :
notice(2): Particles with 2 exclusions             : 2
notice(2): Particles with 3 exclusions             : 2
notice(2): Neighbors included by diameter          : no
notice(2): Neighbors excluded when in the same body: no
** starting run **
run.py:068  |      hoomd.dump.gsd(f"trajectory{RANDOM_SEED}.gsd", period=TRAJ_DUMP_PERIOD, group=all, overwrite=True)
run.py:070  |      hoomd.run(N_steps)
notice(2): -- Neighborlist exclusion statistics -- :
notice(2): Particles with 2 exclusions             : 2
notice(2): Particles with 3 exclusions             : 2
notice(2): Neighbors included by diameter          : no
notice(2): Neighbors excluded when in the same body: no
** starting run **
Time 00:00:10 | Step 6815689 / 10000000 | TPS 680877 | ETA 00:00:04
Time 00:00:10 | Step 6619671 / 10000000 | TPS 661967 | ETA 00:00:05
Time 00:00:10 | Step 6545833 / 10000000 | TPS 654583 | ETA 00:00:05
Time 00:00:10 | Step 6977694 / 10000000 | TPS 697236 | ETA 00:00:04
Time 00:00:10 | Step 6651273 / 10000000 | TPS 665127 | ETA 00:00:05
Time 00:00:14 | Step 10000000 / 10000000 | TPS 788681 | ETA 00:00:00
Average TPS: 699979
---------
-- Neighborlist stats:
14593 normal updates / 100000 forced updates / 0 dangerous updates
n_neigh_min: 0 / n_neigh_max: 1 / n_neigh_avg: 0.25
shortest rebuild period: 47
** run complete **
Time 00:00:14 | Step 10000000 / 10000000 | TPS 770077 | ETA 00:00:00
Average TPS: 717751
---------
-- Neighborlist stats:
14593 normal updates / 100000 forced updates / 0 dangerous updates
n_neigh_min: 0 / n_neigh_max: 1 / n_neigh_avg: 0.25
shortest rebuild period: 47
** run complete **
Time 00:00:14 | Step 10000000 / 10000000 | TPS 682269 | ETA 00:00:00
Average TPS: 681316
---------
-- Neighborlist stats:
14593 normal updates / 100000 forced updates / 0 dangerous updates
n_neigh_min: 0 / n_neigh_max: 1 / n_neigh_avg: 0.25
shortest rebuild period: 47
** run complete **
Time 00:00:14 | Step 10000000 / 10000000 | TPS 750859 | ETA 00:00:00
Average TPS: 684912
---------
-- Neighborlist stats:
14593 normal updates / 100000 forced updates / 0 dangerous updates
n_neigh_min: 0 / n_neigh_max: 1 / n_neigh_avg: 0.25
shortest rebuild period: 47
** run complete **
Time 00:00:15 | Step 10000000 / 10000000 | TPS 787410 | ETA 00:00:00
Average TPS: 701609
---------
-- Neighborlist stats:
14593 normal updates / 100000 forced updates / 0 dangerous updates
n_neigh_min: 0 / n_neigh_max: 1 / n_neigh_avg: 0.25
shortest rebuild period: 47
** run complete **
--Return--
> /media/wtk23/Maxtor/OTHER/PROJECT_OVERFLOW/npr_automated/npr/TESTS/simple_optimization.py(23)<module>()->None
-> breakpoint()
(Pdb) --KeyboardInterrupt--
(Pdb) --KeyboardInterrupt--
(Pdb) --KeyboardInterrupt--
(Pdb) --KeyboardInterrupt--
(Pdb) (Pdb) (Pdb) --KeyboardInterrupt--
(Pdb) (Pdb) --KeyboardInterrupt--
(Pdb) (Pdb) --KeyboardInterrupt--
(Pdb) (Pdb) (Pdb) --KeyboardInterrupt--
(Pdb) (Pdb) --KeyboardInterrupt--
(Pdb) (Pdb) --KeyboardInterrupt--
(Pdb) (Pdb) (Pdb) --KeyboardInterrupt--
(Pdb) (Pdb) --KeyboardInterrupt--
(Pdb) 